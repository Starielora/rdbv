import { TabWidget, ListView, StandardTableView, StandardListView, GroupBox, HorizontalBox, TextEdit, VerticalBox, GridBox, ComboBox } from "std-widgets.slint";

export global TableViewPageAdapter  {
    in property <[[StandardListViewItem]]> row_data: [
        [{text:"key1"}, { text:"val1"}],
        [{text:"key2"}, { text:"val2"}],
        [{text:"key3"}, { text:"val3"}],
    ];
}

export global ListViewAdapter {
    in property <[StandardListViewItem]> list_items: [
        {text: "cf1" },
        {text: "cf2" },
        {text: "cf3" },
        {text: "cf4" },
    ];
}

export component AppWindow inherits Window {
    default-font-family: "Consolas"; // No idea how to change font specifically for one TextEdit. I need this to render blobs in hex.
    default-font-size: 16px;
    title: "rdbv";
    preferred-width: 960px;
    preferred-height: 720px;

    // TODO probably should create a custom component for view and do this callback there
    in property <string> db_value_preview;
    property <string> current_cf; // feels like workaround
    property <string> current_key;
    callback change_db_value_preview(string, string);
    callback change_column_family(string);

    HorizontalBox {

        // I really wanted to have Tabs here, but slint does not support dynamic TabWidget - Tabs must be static
        GroupBox {
            title: "Column family";

            // TODO probably make these dependent on column family name text length - hopefully possible in slint
            min-width: 128px;
            max-width: 256px;
            StandardListView {
                model: ListViewAdapter.list_items;
                current-item-changed(current-item) => {
                    let new_cf = ListViewAdapter.list_items[current-item].text;
                    change_column_family(new_cf);
                    current_cf = new_cf;
                }
            }
        }

        VerticalLayout {

            StandardTableView {
                columns: [
                            { title: @tr("key") },
                            { title: @tr("value") },
                        ];

                rows: TableViewPageAdapter.row_data;

                current-row-changed(current-row) => {
                    debug("Current row index: ", current-row);
                    let key = TableViewPageAdapter.row_data[current-row][0].text;
                    change_db_value_preview(current_cf, key);
                    current_key = key;
                }
            }

            GroupBox {
                title: "preview";
                VerticalLayout {
                    TextEdit {
                        height: 46px;
                        preferred-height: 46px;
                        read-only: true;
                        text: current_key;
                        enabled: !current_key.is-empty;
                    }
                    TextEdit {
                        min-height: 64px;
                        read-only: true;
                        text: db_value_preview;
                        enabled: !current_key.is-empty;
                    }
                }
            }

            HorizontalBox {
                alignment: end;
                Text {
                    vertical-alignment: center;
                    text: "Format";
                }
                ComboBox {
                    model: ["None", "json"];
                }
            }
        }
    }
}
